//go:build windows

package exploit

import (
	"os"

	"golang.org/x/sys/windows"
)

// Windows constants
const (
	STILL_ACTIVE = 259 // Windows process status constant
)

func isProcessRunning(pid int) bool {
	proc, err := os.FindProcess(pid)
	if err != nil || proc == nil {
		return false
	}

	handle, err := windows.OpenProcess(windows.PROCESS_QUERY_LIMITED_INFORMATION, false, uint32(pid))
	if err != nil {
		if err == windows.ERROR_INVALID_PARAMETER {
			return false
		}
		if err == windows.ERROR_ACCESS_DENIED {
			return true
		}
		return false
	}
	defer windows.CloseHandle(handle)

	var exitCode uint32
	err = windows.GetExitCodeProcess(handle, &exitCode)
	if err != nil {
		return false
	}
	return exitCode == STILL_ACTIVE
}
