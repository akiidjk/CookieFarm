package exploit

import (
	"errors"
	"fmt"
	"os"
	"path/filepath"
	"runtime"
	"time"

	"github.com/ByteTheCookies/CookieFarm/internal/client/api"
	"github.com/ByteTheCookies/CookieFarm/internal/client/config"
	"github.com/ByteTheCookies/CookieFarm/internal/client/filesystem"
	"github.com/ByteTheCookies/CookieFarm/pkg/logger"
)

// SetupClient handles the full initialization process for the attack command
func Setup(detach bool) error {
	var err error
	cm := config.GetConfigManager()
	err = config.GetConfigManager().LoadLocalConfigFromFile()
	if err != nil {
		logger.Log.Error().Err(err).Msg("Error loading local configuration, try running `cookieclient config reset`")
		return err
	}

	if detach {
		fmt.Printf("%s %s %s[INFO]%s Detaching from terminal\n", logger.Gray, time.Now().Format("15:04:05"), logger.Blue, logger.Reset)
		Detach()
	}

	argsAttack := cm.GetArgsAttackInstance()
	normalizedPath, err := filesystem.NormalizeNamePathExploit(argsAttack.ExploitPath)
	if err != nil {
		logger.Log.Error().Err(err).Msg("Error normalizing exploit name")
		return err
	}
	argsAttack.ExploitPath = normalizedPath

	if !filesystem.IsPath(argsAttack.ExploitPath) {
		exploitsDir := filepath.Join(config.DefaultConfigPath, "exploits")
		argsAttack.ExploitPath = filepath.Join(exploitsDir, argsAttack.ExploitPath)
	}

	cm.SetArgsAttackInstance(argsAttack)

	logger.Log.Debug().Str("Exploit path", cm.GetArgsAttackInstance().ExploitPath).Msg("Using default exploit path")

	err = ValidateArgs(cm.GetArgsAttackInstance())
	if err != nil {
		return fmt.Errorf("invalid arguments: %w", err)
	}

	logger.Log.Debug().
		Int("ThreadCount", cm.GetArgsAttackInstance().ThreadCount).
		Int("Tick time", cm.GetArgsAttackInstance().TickTime).
		Str("ExploitPath", cm.GetArgsAttackInstance().ExploitPath).
		Msg("Arguments validated")

	if token, err := cm.GetSession(); err != nil {
		return fmt.Errorf("failed to get session token: %w, try to run `cookieclient config login -P <password>`", err)
	} else {
		cm.SetToken(token)
	}

	if sharedConfig, err := api.GetConfig(); err != nil {
		return fmt.Errorf("failed to get config: %w", err)
	} else {
		cm.SetSharedConfig(sharedConfig)
	}

	logger.Log.Debug().Msgf("Current configuration: %+v", cm.GetSharedConfig())

	if !cm.GetSharedConfig().Configured {
		logger.Log.Fatal().Msg("Server not configured. Please run the configurator before using the client.")
	}

	return nil
}

// ValidateArgs validates the arguments passed to the program
func ValidateArgs(args config.ArgsAttack) error {
	if args.TickTime < 1 {
		return errors.New("tick time must be at least 1")
	}

	exploitPath, err := filepath.Abs(args.ExploitPath)
	if err != nil {
		return fmt.Errorf("error resolving exploit path: %v", err)
	}

	if runtime.GOOS != "windows" {
		if info, err := os.Stat(exploitPath); err == nil && info.Mode()&0o111 == 0 {
			return errors.New("exploit file is not executable")
		}
	}

	if _, err := os.Stat(exploitPath); os.IsNotExist(err) {
		return errors.New("exploit not found in the exploits directory")
	}

	return nil
}
