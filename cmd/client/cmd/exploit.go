// Package cmd contains commands for the CookieFarm client
package cmd

import (
	"fmt"
	"os"
	"os/signal"
	"syscall"

	"github.com/ByteTheCookies/CookieFarm/internal/client/config"
	"github.com/ByteTheCookies/CookieFarm/internal/client/exploit"
	"github.com/ByteTheCookies/CookieFarm/internal/client/websockets"
	"github.com/ByteTheCookies/CookieFarm/pkg/logger"
	"github.com/rs/zerolog"
	"github.com/spf13/cobra"
)

// ExploitCmd represents the main exploit command group
// Exported for TUI usage
var ExploitCmd = &cobra.Command{
	Use:   "exploit",
	Short: "Handling exploits and executing them in a loop",
	Long:  `This command allows you to handle exploits (execute, create, etc.). You can specify the exploit path, service port, and other parameters.`,
}

// runCmd represents the run exploit command
var runCmd = &cobra.Command{
	Use:   "run",
	Short: "Attack other teams with an exploit",
	Long:  `This command allows you to attack other teams with an exploit. You can specify the exploit path and the server host.`,
	Run:   run,
}

// createCmd represents the create exploit command
var createCmd = &cobra.Command{
	Use:   "create",
	Short: "Generate a new exploit template",
	Long: `Generate a new exploit template for the CookieFarm client.
	This command initializes a structured exploit template file in your specified directory with all necessary components for immediate use.`,
	Run: create,
}

// listCmd represents the list exploit command
var listCmd = &cobra.Command{
	Use:   "list",
	Short: "List all current running exploits",
	Long:  "This command lists all currently running exploits that are registered in the local configuration.",
	Run:   list,
}

// removeCmd represents the remove exploit command
var removeCmd = &cobra.Command{
	Use:   "remove",
	Short: "Remove an exploit template",
	Long:  `Remove an exploit template from the CookieFarm client.`,
	Run:   remove,
}

// stopCmd represents the stop exploit command
var stopCmd = &cobra.Command{
	Use:   "stop",
	Short: "Stop the exploit execution",
	Long:  `This command stops the execution of the currently running exploit. It gracefully terminates the exploit process and cleans up any resources used during execution.`,
	Run:   stop,
}

var (
	exploitPath string
	servicePort uint16
	detach      bool
	tickTime    int
	threadCount int
	exploitName string
	pid         int
)

func init() {
	// Add ExploitCmd to root command
	RootCmd.AddCommand(ExploitCmd)

	// Add all subcommands to ExploitCmd
	ExploitCmd.AddCommand(runCmd)
	ExploitCmd.AddCommand(createCmd)
	ExploitCmd.AddCommand(stopCmd)
	ExploitCmd.AddCommand(listCmd)
	ExploitCmd.AddCommand(removeCmd)

	// Setup flags for attackCmd (run)
	runCmd.Flags().StringVarP(&exploitPath, "exploit", "e", "", "Path to the exploit file to execute")
	runCmd.Flags().Uint16VarP(&servicePort, "port", "p", 0, "Service Port to attack")
	runCmd.Flags().BoolVarP(&detach, "detach", "d", false, "Run the exploit in the background (detached mode)")
	runCmd.Flags().IntVarP(&tickTime, "tick", "t", 120, "Interval in seconds between exploit executions")
	runCmd.Flags().IntVarP(&threadCount, "thread", "T", 5, "Number of concurrent threads to run the exploit with")
	runCmd.MarkFlagRequired("exploit")
	runCmd.MarkFlagRequired("password")
	runCmd.MarkFlagRequired("port")
	runCmd.MarkFlagRequired("host")

	// Setup flags for createCmd
	createCmd.Flags().StringVarP(&exploitName, "name", "n", "", "Name of the exploit template")
	createCmd.MarkFlagRequired("name")

	// Setup flags for removeCmd
	removeCmd.Flags().StringVarP(&exploitName, "name", "n", "", "Name of the exploit template")
	removeCmd.MarkFlagRequired("name")

	// Setup flags for stopCmd
	stopCmd.Flags().IntVarP(&pid, "pid", "p", -1, "Pid to the exploit file to stop")
	stopCmd.MarkFlagRequired("pid")
}

// ===== RUN EXPLOIT FUNCTIONS =====

// run is the main execution flow for the run command (this function is specific to the run command, instead use exploit.Run)
func run(cmd *cobra.Command, args []string) {
	cm := config.GetConfigManager()
	cm.SetArgsAttackInstance(config.ArgsAttack{
		ServicePort: servicePort,
		TickTime:    tickTime,
		ThreadCount: threadCount,
		Detach:      detach,
		ExploitPath: exploitPath,
	})
	logger.Log.Debug().Str("ExploitPath", cm.GetArgsAttackInstance().ExploitPath).
		Int("TickTime", cm.GetArgsAttackInstance().TickTime).
		Int("ThreadCount", cm.GetArgsAttackInstance().ThreadCount).
		Uint16("ServicePort", cm.GetArgsAttackInstance().ServicePort).
		Msg("Starting exploit execution with parameters")

	c := make(chan os.Signal, 1)
	signal.Notify(c, os.Interrupt, syscall.SIGTERM)
	go func() {
		<-c
		logger.Log.Info().Msg("Shutting down gracefully...")
		if cm.GetPID() != 0 {
			exploit.Cleanup(cm.GetPID())
		}
		os.Exit(0)
	}()

	if err := exploit.Setup(detach); err != nil {
		if logger.LogLevel != zerolog.Disabled {
			logger.Log.Fatal().Err(err).Msg("Initialization error")
			logger.Close()
		} else {
			fmt.Println("Error initializing:", err)
		}
		os.Exit(1)
	}
	defer logger.Close()

	logger.Log.Info().Msg("Client initialized successfully")

	result, err := exploit.Start(cm.GetArgsAttackInstance().ExploitPath, tickTime, threadCount, servicePort)
	if err != nil {
		logger.Log.Fatal().Err(err).Msg("Failed to execute exploit")
	}

	exploitS := config.Exploit{
		Name: exploitPath,
		PID:  result.Cmd.Process.Pid,
	}
	localConfig := cm.GetLocalConfig()
	localConfig.Exploits = append(localConfig.Exploits, exploitS)
	cm.SetLocalConfig(localConfig)
	if err := cm.WriteLocalConfigToFile(); err != nil {
		logger.Log.Fatal().Err(err).Msg("Failed to write configuration with new exploit")
	}
	cm.SetPID(result.Cmd.Process.Pid)
	logger.Log.Info().Msg("Exploit started successfully")

	websockets.OnNewConfig = func() {
		exploit.RestartGlobal()
	}

	go websockets.Start(result.FlagsChan)

	if err := result.Cmd.Wait(); err != nil {
		logger.Log.Error().Err(err).Msg("Exploit process exited with error")
	}
}

// ===== CREATE EXPLOIT FUNCTIONS =====

// create handles the creation of a new exploit template
func create(cmd *cobra.Command, args []string) {
	cm := config.GetConfigManager()
	cm.SetExploitName(exploitName)
	res, err := exploit.Create(exploitName)
	if err != nil {
		logger.Log.Error().Err(err).Msg("Error creating exploit")
		return
	} else {
		logger.Log.Info().Msg(res)
	}
}

// ===== LIST EXPLOIT FUNCTIONS =====

// list lists all currently running exploits
func list(cmd *cobra.Command, args []string) {
	res, err := exploit.List()
	if err != nil {
		logger.Log.Error().Err(err).Msg("Error listing exploits")
		fmt.Println("Error listing exploits:", err)
		return
	} else {
		logger.Log.Info().Msg(res)
	}
}

// ===== REMOVE EXPLOIT FUNCTIONS =====

// remove handles the removal of an exploit template
func remove(cmd *cobra.Command, args []string) {
	cm := config.GetConfigManager()
	cm.SetExploitName(exploitName)
	res, err := exploit.Remove(exploitName)
	if err != nil {
		logger.Log.Error().Err(err).Msg("Error removing exploit")
		return
	} else {
		logger.Log.Info().Msg(res)
	}
}

// ===== STOP EXPLOIT FUNCTIONS =====

// stop stops a running exploit by PID
func stop(cmd *cobra.Command, args []string) {
	cm := config.GetConfigManager()
	cm.SetPID(pid)
	res, err := exploit.Stop(pid)
	if err != nil {
		logger.Log.Error().Err(err).Msg("Error stopping exploit")
		return
	} else {
		logger.Log.Info().Msg(res)
	}
}
